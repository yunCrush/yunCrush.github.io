{"meta":{"title":"Crush","subtitle":"","description":"非著名程序员","author":"Crush","url":"http://yuncrush.com","root":"/"},"pages":[{"title":"categories","date":"2020-07-14T14:46:50.000Z","updated":"2021-01-03T07:52:10.420Z","comments":false,"path":"categories/index.html","permalink":"http://yuncrush.com/categories/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-07-14T14:46:50.000Z","updated":"2021-01-03T07:51:44.220Z","comments":false,"path":"tags/index.html","permalink":"http://yuncrush.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于ES的请求方法","slug":"Es/es_requestMethod","date":"2021-01-07T14:22:22.586Z","updated":"2021-01-10T15:46:36.211Z","comments":true,"path":"2021/01/07/Es/es_requestMethod/","link":"","permalink":"http://yuncrush.com/2021/01/07/Es/es_requestMethod/","excerpt":"","text":"ES请求方法PUT与POST 创建操作PUT与POST都可以，区别在于POST作用于一个集合之上，即索引(POST /index_name/_doc),而PUT作用于一个具体的资源上的，即具体文档(PUT /index_name/_doc/123)。 PUT会将新的json值完全替换掉，如果文档存在将文档删除，新的文档被索引，版本号+1，在原文档上增加字段使用POST,update请求，相关代码如下：1234567891011# 初始化一条数据PUT users&#x2F;_doc&#x2F;1&#123; &quot;name&quot; : &quot;Mike&quot;&#125;# 同样的id加入另外一条数据POST users&#x2F;_doc&#x2F;1&#123; &quot;user&quot;: &quot;Jacks&quot;, &quot;age&quot;: 18&#125; 加入user,age字段后，返回结果如下图，发现并不是3个字段，而只有两个字段，猜测是删除文档，添加新数据，同时_version版本号+1 1234567# 再次插入一条数据，注意_updatePOST users&#x2F;_update&#x2F;1&#123; &quot;doc&quot;: &#123; &quot;class&quot;:1 &#125;&#125; 使用_update请求后，添加字段成功。 这里_update使用时，主要做了以下几件事： 从旧文档构建 JSON 更改该 JSON 删除旧文档 索引一个新文档","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"}]},{"title":"ES入门之查询","slug":"Es/es_query","date":"2021-01-07T14:20:30.964Z","updated":"2021-01-10T15:46:41.410Z","comments":true,"path":"2021/01/07/Es/es_query/","link":"","permalink":"http://yuncrush.com/2021/01/07/Es/es_query/","excerpt":"","text":"Query这里主要学习term、wildcard、match、matchall区别","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"}]},{"title":"ES入门之Mapping","slug":"Es/es_mapping","date":"2021-01-07T12:30:14.934Z","updated":"2021-01-07T14:33:56.949Z","comments":true,"path":"2021/01/07/Es/es_mapping/","link":"","permalink":"http://yuncrush.com/2021/01/07/Es/es_mapping/","excerpt":"","text":"Mapping12# 查看index_name索引下字段类型GET index_name&#x2F;_mapping 核心数据类型 字符串型：text,keyword 数值型：long、integer、short、byte、double、fload 日期类型：date 布尔类型：boolean 二进制类型：binary 范围类型：integer_range、float_range、long_range、double_range、date_range JSON数据匹配ES数据 text与keyword text类型的字段都会被全文索引，text字段开启分词，但是默认不开启聚合,开启聚合需要将fielddata置为true。 keyword类型的字段为关键字，不会被分词，在聚合时可以查询。 这里首先设置job的类型相关json，设置Mapping在下文中有提及，job字段的类型为text，与keword。 123456789&quot;job&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 50 &#125; &#125; &#125; 这里按照keyword类型进行聚合 123456789101112# 对 Text 字段进行 terms 分词，分词后的termsPOST employees&#x2F;_search &#123; &quot;size&quot;: 0, &quot;aggs&quot;: &#123; &quot;jobs&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;:&quot;job.keword&quot; &#125; &#125; &#125; &#125; 显然，keyword聚合，返回结果，然后使用text进行聚合 1234567891011POST employees&#x2F;_search&#123; &quot;size&quot;: 0, &quot;aggs&quot;: &#123; &quot;jobs&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;:&quot;job&quot; &#125; &#125; &#125;&#125; 返回结果报错，因为text字段默认fieldata默认为false。 自定义Mapping 自定义Mapping ,字段类型被定义后禁止修改，倒排索引生成后不允许修改 123456789101112131415161718192021222324252627282930# PUT请求 employees索引名字，字段分别为：age，gender，job，name，salaryPUT &#x2F;employees&#x2F;&#123; &quot;mappings&quot; : &#123; &quot;properties&quot; : &#123; &quot;age&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;, &quot;gender&quot; : &#123; &quot;type&quot; : &quot;keyword&quot; &#125;,# 这里job字段设置为text与keyword两种类型 &quot;job&quot; : &#123; &quot;type&quot; : &quot;text&quot;, &quot;fields&quot; : &#123; &quot;keyword&quot; : &#123; &quot;type&quot; : &quot;keyword&quot;, &quot;ignore_above&quot; : 50 &#125; &#125; &#125;, &quot;name&quot; : &#123; &quot;type&quot; : &quot;keyword&quot; &#125;, &quot;salary&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125; &#125; &#125;&#125; 接着初始化数据 123456789101112131415161718192021222324252627282930313233343536373839404142# _bulk批量操作PUT &#x2F;employees&#x2F;_bulk&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;1&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Emma&quot;,&quot;age&quot;:32,&quot;job&quot;:&quot;Product Manager&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;:35000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;2&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Underwood&quot;,&quot;age&quot;:41,&quot;job&quot;:&quot;Dev Manager&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 50000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;3&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Tran&quot;,&quot;age&quot;:25,&quot;job&quot;:&quot;Web Designer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;:18000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;4&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Rivera&quot;,&quot;age&quot;:26,&quot;job&quot;:&quot;Web Designer&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;: 22000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;5&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Rose&quot;,&quot;age&quot;:25,&quot;job&quot;:&quot;QA&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;:18000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;6&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Lucy&quot;,&quot;age&quot;:31,&quot;job&quot;:&quot;QA&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;: 25000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;7&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Byrd&quot;,&quot;age&quot;:27,&quot;job&quot;:&quot;QA&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;:20000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;8&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Foster&quot;,&quot;age&quot;:27,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 20000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;9&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Gregory&quot;,&quot;age&quot;:32,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;:22000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;10&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Bryant&quot;,&quot;age&quot;:20,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 9000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;11&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Jenny&quot;,&quot;age&quot;:36,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;:38000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;12&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Mcdonald&quot;,&quot;age&quot;:31,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 32000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;13&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Jonthna&quot;,&quot;age&quot;:30,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;:30000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;14&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Marshall&quot;,&quot;age&quot;:32,&quot;job&quot;:&quot;Javascript Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 25000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;15&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;King&quot;,&quot;age&quot;:33,&quot;job&quot;:&quot;Java Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;:28000 &#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;16&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Mccarthy&quot;,&quot;age&quot;:21,&quot;job&quot;:&quot;Javascript Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 16000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;17&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Goodwin&quot;,&quot;age&quot;:25,&quot;job&quot;:&quot;Javascript Programmer&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 16000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;18&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Catherine&quot;,&quot;age&quot;:29,&quot;job&quot;:&quot;Javascript Programmer&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;: 20000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;19&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Boone&quot;,&quot;age&quot;:30,&quot;job&quot;:&quot;DBA&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;salary&quot;: 30000&#125;&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;20&quot; &#125; &#125;&#123; &quot;name&quot; : &quot;Kathy&quot;,&quot;age&quot;:29,&quot;job&quot;:&quot;DBA&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;salary&quot;: 20000&#125; 新增字段：通过dynamic字段来控制字段的新增，默认为true，允许字段的新增，false不允许字段的新增，但是可以正常写入，对写入的字段无法做查询操作，strict文档不能写入字段，报错 1234567891011121314151617PUT my_index&#123; &quot;mappings&quot;: &#123; &quot;dynamic&quot;: &quot;strict&quot;, &quot;properties&quot;: &#123; &quot;title&quot;:&#123; &quot;type&quot;: &quot;text&quot; &#125; &#125; &#125;&#125;# 插入数据PUT my_index&#x2F;_doc&#x2F;1&#123; &quot;title&quot;:&quot;crush&quot;, &quot;age&quot;:&quot;12&quot;&#125; 报错截图 字段是否可被索引123456789101112131415161718192021# 使用index来控制字段是否可以被索引，默认为true，设置成false不可被检索PUT my_index2&#123; &quot;mappings&quot;: &#123; &quot;properties&quot;: &#123; &quot;title&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;, &quot;name&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;index&quot;: false &#125; &#125; &#125;&#125;# 初始化数据PUT my_index2&#x2F;_bulk&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;title&quot;:&quot;crush&quot;,&quot;name&quot;:&quot;crush1&quot;&#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#123;&quot;title&quot;:&quot;yuncrush2&quot;,&quot;name&quot;:&quot;yuncrush2&quot;&#125; 查询错误如图","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"}]},{"title":"反射机制","slug":"reflect/reflect_1","date":"2021-01-03T12:55:38.993Z","updated":"2021-01-05T16:13:34.937Z","comments":true,"path":"2021/01/03/reflect/reflect_1/","link":"","permalink":"http://yuncrush.com/2021/01/03/reflect/reflect_1/","excerpt":"","text":"反射的概念 反射机制是指在程序运行的时候，对于任意一个类都能获取其所有属性以及方法，对于任意一个对象都可以动态的调用其任意一个方法。这种动态的获取类和对象的信息，以及动态的调用对象的方法的功能称为Java语言的反射机制。 Java中的对象有两种类型：编译时(由.java源代码到.class文件的过程)类型和运行时类型。编译时类型是指在声明对象时所采用的类型，运行时类型是指为对象赋值时所采用的类型。 1Person person &#x3D; new Student(); 在这里person对象的编译时类型为Person，运行时类型为Student，因此无法在编译时获取到Student类中定义的方法。 准备工作：这里定义一个Employee实体类，重写toString方法，添加静态代码块是为了测试在对象初始化时，employee对象被加载到JVM中。代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package com.yun.reflect.entity;&#x2F;** * @Author: Crush * enumber 员工编号 * ename 员工姓名 * salary 员工薪水 * dname 部门名称 *&#x2F;public class Employee &#123; private Integer enumber; public String ename; private Float salary; private String dname; static &#123; System.out.println(&quot;employee已经被加载到JVM中,初始化成功&quot;); &#125; public Employee() &#123; System.out.println(&quot;默认构造方法已经执行&quot;); &#125; public Employee(Integer enumber, String ename, Float salary, String dname) &#123; this.enumber &#x3D; enumber; this.ename &#x3D; ename; this.salary &#x3D; salary; this.dname &#x3D; dname; System.out.println(&quot;employee带参数构造方法已经被执行&quot;); &#125; @Override public String toString() &#123; return &quot;Employee&#123;&quot; + &quot;enumber&#x3D;&quot; + enumber + &quot;, ename&#x3D;&#39;&quot; + ename + &#39;\\&#39;&#39; + &quot;, salary&#x3D;&quot; + salary + &quot;, dname&#x3D;&#39;&quot; + dname + &#39;\\&#39;&#39; + &#39;&#125;&#39;; &#125; public Integer getEnumber() &#123; return enumber; &#125; public void setEnumber(Integer enumber) &#123; this.enumber &#x3D; enumber; &#125; public String getEname() &#123; return ename; &#125; public void setEname(String ename) &#123; this.ename &#x3D; ename; &#125; public Float getSalary() &#123; return salary; &#125; public void setSalary(Float salary) &#123; this.salary &#x3D; salary; &#125; public String getDname() &#123; return dname; &#125; public void setDname(String dname) &#123; this.dname &#x3D; dname; &#125; public Employee updateSalary(Float val) &#123; this.salary &#x3D; this.salary + val; System.out.println(&quot;薪资调制&quot; + this.salary); return this; &#125;&#125; 反射的步骤 获取想要操作的类的Class对象，该Class对象是反射的核心，通过它可以调用类的任意方法。 调用Class对象所对应的类的定义的方法，这是反射的使用阶段。 使用反射API来获取类的属性或方法 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839package com.yun.reflect;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;&#x2F;** * @Author: Crush *&#x2F;public class ClassBasic &#123; public static void main(String[] args) &#123; try&#123;&#x2F;&#x2F; 1. 获取Employee类的Class对象 Class basicClass &#x3D; Class.forName(&quot;com.yun.reflect.entity.Employee&quot;);&#x2F;&#x2F; 2.获取Employee类的所有的方法的信息 Method[] methods &#x3D; basicClass.getMethods(); for (Method method : methods) &#123; System.out.println(method); &#125; System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);&#x2F;&#x2F; 3.获取Employee类的所有成员的属性信息 Field [] fields &#x3D; basicClass.getDeclaredFields(); for (Field field : fields) &#123; System.out.println(field.toString()); &#125; System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);&#x2F;&#x2F; 4.获取Employee类的所有的构造方法的信息 Constructor [] constructors &#x3D; basicClass.getDeclaredConstructors(); for(Constructor constructor : constructors)&#123; System.out.println(constructor.toString()); &#125; &#125;catch (ClassNotFoundException e )&#123; e.printStackTrace(); &#125; &#125;&#125; 创建对象方式 使用Class对象的newInstance方法，要求Class具有无参数构造函数。 使用Class对象获取指定的Constructor对象，再调用对象newInstance方法创建Class对象对应类的实例。 Java反射API Java的反射API主要用于在运行过程中动态生成类、接口或对象等信息。 Class类 用于获取类的属性，方法等信息 Field类 表示类的成员变量，用于获取和设置类中的属性值 Constructor类 表示类的构造方法 Method类 表示类的方法，用于获取方法的描述信息或者执行某个方法","categories":[{"name":"java","slug":"java","permalink":"http://yuncrush.com/categories/java/"}],"tags":[{"name":"reflect","slug":"reflect","permalink":"http://yuncrush.com/tags/reflect/"}]},{"title":"JVM","slug":"JVM/JVM_1","date":"2021-01-02T16:53:28.185Z","updated":"2021-01-03T12:54:56.970Z","comments":true,"path":"2021/01/03/JVM/JVM_1/","link":"","permalink":"http://yuncrush.com/2021/01/03/JVM/JVM_1/","excerpt":"","text":"前言: JVM(Java Virtual Model)Java虚拟机模型与JMM(Java Memory Model)不同。 JVM组件 JVM的主要组成部分包括：类加载引擎，运行时数据区，执行引擎，本地库接口。JVM结构图如下所示： 组件的作用： 首先通过类加载引擎将JAVA代码转换成字节码，然后运行时数据区会将字节码加载到内存中，由于字节码只是JVM的一套规范指令集，并不能直接交给底层操作系统执行执行，这里需要特定的命令解析器执行引擎来解析，在解析的过程会调用其他语言的本地库接口来实现整个程序的功能。 JVM运行时数据区从线程的共享与私有角度分类 私有：Java虚拟机栈，本地方法栈，程序计数器 共享：堆，方法区 程序计数器：当前线程所执行的字节码的行号指示器，字节码解析器的工作主要是通过改变这个计数器的值，来读取下一条需要执行的字节码指令，分支，循环，跳转，异常处理，线程恢复等基本功能，都需要依赖这个计数器。 本地方法栈：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务JAVA方法的，而本地方法栈是服务虚拟机调用本地Native方法的。 Java虚拟机栈：用于存储局部变量表，操作数栈，动态链接，方法出口信息等。 堆： Java虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存。 方法区：用于存储已经被虚拟机加载的类的信息，常量，静态变量，即时编译后的代码等数据。 类加载器 对于任意一个类，都需要有加载它的类加载器和这个类本身在一同确立在JVM中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将class文件加载到JVM内存里面，然后再转换为class对象。 分类 启动类加载器 虚拟机自身的一部分，用来加载JAVA_HOME/lib目录中的，或者被-Xbootclasspath参数所指定的路径中并且被虚拟机识别的类库。 其它类加载器 a. 扩展类加载器(Extension ClassLoader)：负责加载JAVA_HOME／lib／ext目录或java.ext.dirs系统变量指定的路径中的所有的类库。 b.应用程序类加载器(Apllication ClassLoader)： 负责加载用户类路径(classpath)上的指定类库，我们可以直接使用这个类加载器。一般而言，我们没有自定义类加载器默认就使用这加载器。 除了以上三种，我们还可以通过集成Java.lang.ClassLoader实现自定义的类加载器。 双亲委派模型 如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类去完成，每一层的类加载都是如此，这样所有的请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求(它的搜索范围中没有找到所需要的类)时，子加载器才会尝试去加载。如下图所示： 类加载的执行过程 加载 指JVM读取Class文件，并且根据Class文件在堆上创建对象的过程，这里读取Class文件时，可以是文件形式，也可以是Jar包，war包等。 检查 检查Class文件是否符合当前虚拟机的要求，保障虚拟机自身的安全。 准备 给类中的静态变量分配存储空间。 解析 JVM会将常量池中的符号引用替换为直接引用。符号引用理解为一个标识，而直接引用直接指向内存中的地址。 初始化 对静态变量和静态代码块进行初始化工作。","categories":[{"name":"java","slug":"java","permalink":"http://yuncrush.com/categories/java/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://yuncrush.com/tags/jvm/"}]},{"title":"夏天","slug":"summer","date":"2021-01-02T13:54:11.017Z","updated":"2021-01-02T13:54:31.539Z","comments":true,"path":"2021/01/02/summer/","link":"","permalink":"http://yuncrush.com/2021/01/02/summer/","excerpt":"","text":"夏天的风很自由。","categories":[{"name":"young","slug":"young","permalink":"http://yuncrush.com/categories/young/"}],"tags":[{"name":"枯木逢春夏秋冬","slug":"枯木逢春夏秋冬","permalink":"http://yuncrush.com/tags/%E6%9E%AF%E6%9C%A8%E9%80%A2%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/"}]},{"title":"vim基本使用","slug":"linux/vim","date":"2021-01-02T13:53:26.521Z","updated":"2021-01-02T13:53:40.637Z","comments":true,"path":"2021/01/02/linux/vim/","link":"","permalink":"http://yuncrush.com/2021/01/02/linux/vim/","excerpt":"","text":"三种模式转换命令模式：移动光标、删除 输入: / ?进入命令行模式 输入aiorAIOR进入插入模式 插入模式：输入文本 按ESC进入命令模式 命令行模式：搜索保存退出 按Esc进入模式 命令模式 移动光标h,j,k,l分别代表左下上右，可以加入数字控制位置,10j,向下移动10行0:移动到当前行首 $:移动前行尾G:移动到文件的最后一行,nG:移动到n行，gg移动到第一行n 向下移动n行 编辑x:向后删除一个字符 X:向前删除一个字符nx:向后删除n个字符dd:删除一行 ndd:向下删除n行u:撤销前一个操作 查找与替换 /word: 向后查找word单词，可以是正则表达式 ?word:向前查找word :%s/word1/word2[gc]:将word1替换成word2，g全局，gc替换时确认,%整个文本替换 插入模式 i,I:进入插入模式，前者在当前位置插入，后者为当前行第一个非空白字符 o,O:前者在当前行的后面插入新行，后者在当前行的前面插入新行 r,R:前者替换光标所在的字符，后者从当前位置开始替换，直到按下Esc为止 命令行模式 :进入命令行模式 :q :没有修改文件时推出 :q!:修改了文件，但不保存文件退出 :w:保存文件 :w [文件名]: 另存为一个新文件，当前文件没有保存 :w!:强制保存 :x:保存并退出 :x!:强制保存退出 :ZZ:有修改保存退出，没有修改直接退出 :set nu:显示行号","categories":[{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/categories/linux/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://yuncrush.com/tags/vim/"}]},{"title":"linux常用指令","slug":"linux/linux","date":"2021-01-02T13:52:34.678Z","updated":"2021-01-02T13:52:56.011Z","comments":true,"path":"2021/01/02/linux/linux/","link":"","permalink":"http://yuncrush.com/2021/01/02/linux/linux/","excerpt":"","text":"linux常识性指令1234567uname --help //显示帮助uname -v //输出内核版本信息uname --version //显示版本信息并退出who am i //等于who -m 登陆用户的信息who //查询当前登录在系统上的用户信息# //root登陆具有所有权限$ //普通用户没什么权限 文件的传输windows本地安装git bash使用 1.从远处(服务器)复制文件到本地目录 1$ scp root@192.168.45.129:/usr/local/tmp/test.md ./ 2.从远处(服务器)复制目录到本地目录 1$ scp root@192.168.45.129:/usr/local/tmp ./ 3.上传本地文件到服务器指定目录 1$ scp /opt/test.tar root@192.168.45.129:/usr/local 4.上传本地目录到服务器指定目录 1$ scp /opt/soft/text root@192.168.45.12:/usr/local 5.windows文件传输到服务器 12yum install lrzsz直接将文件拖入到命令行窗口即可","categories":[{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/tags/linux/"}]},{"title":"docker与Mongodb的安装","slug":"mongodb/mongodb_1","date":"2021-01-02T13:47:28.706Z","updated":"2021-01-02T13:47:47.153Z","comments":true,"path":"2021/01/02/mongodb/mongodb_1/","link":"","permalink":"http://yuncrush.com/2021/01/02/mongodb/mongodb_1/","excerpt":"","text":"Docker与Mongodb 安装、启动docker 12345678910sudo yum -y updatesudo yum -y install epel-releasesudo yum -y install docker-iosystemclt start docker //启动dockerdocker version //查看docker版本 docker的常用命令 123456docker ps //查看docker容器iddocker images //查看本地镜像docker ps -a //显示所有容器,-aq只显示id docker安装Mongodb 4.0 1234567891011121314docker pull mongo:4 //拉取mongodb4.0镜像docker images //查看是否有Mongodb镜像//启动mongodb 端口号27017 进程name mongodocker run -itd --name mongo -p 27017:27017 mongo:4 //mongodb 4.0版本docker run -itd --name mongo -p 27017:27017 mongo:latest //最新版本//验证是否启动成功docker exec -it mongo mongo docker移除镜像与容器 123456789101112docker imagesdocker rmi &lt;image id&gt; &#x2F;&#x2F;强制删除指定id的imagedocker rmi $(docker iamges -q) &#x2F;&#x2F;删除所有imagesdocker stop container-id &#x2F;&#x2F;停止该id的容器docker rm container-id &#x2F;&#x2F;移除该id的容器docker stop $(docker ps -aq) &#x2F;&#x2F;停止所有的容器","categories":[{"name":"Nosql","slug":"Nosql","permalink":"http://yuncrush.com/categories/Nosql/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yuncrush.com/tags/mongodb/"},{"name":"docker","slug":"docker","permalink":"http://yuncrush.com/tags/docker/"}]},{"title":"防火墙常用命令","slug":"linux/firewall","date":"2021-01-02T13:46:38.866Z","updated":"2021-01-02T13:46:53.600Z","comments":true,"path":"2021/01/02/linux/firewall/","link":"","permalink":"http://yuncrush.com/2021/01/02/linux/firewall/","excerpt":"","text":"防火墙系统centos7 Centos7默认的防火墙不是iptables而是firewall 查看防火墙状态 1firewall-cmd --state 开启/关闭防火墙 12systemctl start firewalldsystemctl stop firewalld 禁止开机启动 1systemctl disable firewalld.service 查看开放的端口 1firewall-cmd --list-all 监听端口 1netstat -lnp | grep 8080 开放/关闭端口 12firewall-cmd --add-port&#x3D;80&#x2F;tcp --permanent &#x2F;&#x2F;开放端口--permanent重启不会丢失firewall-cmd --remove-port&#x3D;9999&#x2F;tcp --permanent &#x2F;&#x2F;关闭端口 重启防火墙 1firewall-cmd --reload &#x2F;&#x2F;开放，关闭端口都需要重启防火墙","categories":[{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/categories/linux/"}],"tags":[{"name":"firewall","slug":"firewall","permalink":"http://yuncrush.com/tags/firewall/"}]},{"title":"ElasticSearch入门","slug":"Es/es_commonSense","date":"2021-01-02T13:27:15.599Z","updated":"2021-01-02T13:28:13.074Z","comments":true,"path":"2021/01/02/Es/es_commonSense/","link":"","permalink":"http://yuncrush.com/2021/01/02/Es/es_commonSense/","excerpt":"","text":"配置说明这里选择rpm包安装es, rpm -ivh elasticsearch.rpm 文件存在于/usr/share/ 配置文件存在/etc/elasticsearch/elasticsearch.yml 端口9200 通过systemctl start elasticsearch启动，status,stop 查看状态与停止 elasticsearch.yml es的相关配置，此处需要将network.host设置为0.0.0.0 jvm.options jvm的相关参数 log4j2.properties 日志相关的配置 cluster.name 集群名称，判断是否是同一集群 node.name 节点名称，以此作为集群中不同节点的区分条件 network.host/http.port 网络地址与端口，用于http和transport服务与使用 path.data 数据的存储地址 path.log 日志的地址Development与Production模式说明 以transport的地址是否绑定在localhost为判断标准network.host Development模式下启动以warning的方式提示配置检查异常 Production模式下在启动时会以error的方式提示配置检查异常 修改参数的第二种方式 bin/elasticsearch-Ehttp.port=19200基本使用 ES本地启动集群方式 12345678910bin&#x2F;elasticsearchbin&#x2F;elasticsearch -Ehttp.port&#x3D;8200 -Epath.data&#x3D;node2bin&#x2F;elasticsearch -Ehttp.port&#x3D;9200 -Epath.data&#x3D;node3ip:port&#x2F;_cluster&#x2F;stats 更多集群相关信息ip:port&#x2F;_cat&#x2F;nodes 节点相关信息，是否组成集群，*表示主节点 index index由具有相同字段的列表组成，相当于mysql的table,6.0后type _doc不再起作用 document 文档，每个文档具有唯一的id标识，自行指定或者es生成倒排索引目录页对应正排索引，索引页对应倒排索引 正排索引：文档ID到文档内容，单词的关联关系 倒排索引：单词到文档ID的关联关系 倒排索引是搜索引擎的核心，主要包含：单词词典与倒排列表 es存储的每个字段都有自己的倒排索引 索引API12345678PUT &#x2F;test_index 创建索引GET _cat&#x2F;indices 查看现有的索引DELETE &#x2F;test_index 删除索引GET &#x2F;test_index 查看当前索引信息 文档的创建 单条文档插入 123456PUT &#x2F;test_index&#x2F;_doc&#x2F;1 单条数据的插入格式：&#x2F;index&#x2F;type&#x2F;idPUT &#x2F;test_index&#x2F;_doc&#x2F;1&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;&#125; 批量文档的插入 12345678910POST test_index&#x2F;_bulk&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;username&quot;:&quot;yun&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;,&quot;age&quot;:18&#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;Python Engineer&quot;,&quot;age&quot;:20&#125; 文档的查询12345678910GET &#x2F;test_index&#x2F;_doc&#x2F;1 查询单条id&#x3D;1,存储在source里面的完整文档信息GET &#x2F;test_index&#x2F;_doc&#x2F;_search query查询，term单词匹配username&#x3D;crush&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125;GET &#x2F;test_index&#x2F;_mget 查询id是1,2的文档&#123;&quot;docs&quot;:[&#123;&quot;_id&quot;:&quot;1&quot;,&quot;_id&quot;:&quot;2&quot;&#125;]&#125; Search API对es里面存储的数据进行查询分析，endpoint为_search 12345678GET &#x2F;_searchGET &#x2F;test_index&#x2F;_searchGET &#x2F;test1_index,test2_index&#x2F;_searchGET &#x2F;test*&#x2F;_search 每次可以查询多个索引 URL Search与Request Body Search1234# url searchGET &#x2F;my_index&#x2F;_search?q&#x3D;crush&amp;df&#x3D;user&amp;sort&#x3D;age:asc&amp;from&#x3D;4&amp;size&#x3D;10&amp;timeout&#x3D;15 q指定查询的语句,df或者default，不指定默认查询，es会查询所有字段,from size用于分页，返回5-14个文档 12345678910# request body searchGET &#x2F;my_index&#x2F;_doc&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;user&quot;:&quot;crush&quot;&#125;&#125;&#125; QueryDSL查询字段类查询: 全文匹配、match、match_phrase等query,单词匹配：term、terms、range等query match Query 1234GET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125; 123456# operator andGET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&#123;&quot;query&quot;:&quot;yun crush&quot;,&quot;operator&quot;:&quot;and&#125;&#125;&#125;&#125; 123456#最小匹配字段数GET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;job&quot;:&#123;&quot;query&quot;:&quot;java python Engineer&quot;,&quot;minium_should_match&quot;:&quot;2&quot;&#125;&#125;&#125;&#125;","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://yuncrush.com/categories/java/"},{"name":"young","slug":"young","permalink":"http://yuncrush.com/categories/young/"},{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/categories/linux/"},{"name":"Nosql","slug":"Nosql","permalink":"http://yuncrush.com/categories/Nosql/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"},{"name":"reflect","slug":"reflect","permalink":"http://yuncrush.com/tags/reflect/"},{"name":"jvm","slug":"jvm","permalink":"http://yuncrush.com/tags/jvm/"},{"name":"枯木逢春夏秋冬","slug":"枯木逢春夏秋冬","permalink":"http://yuncrush.com/tags/%E6%9E%AF%E6%9C%A8%E9%80%A2%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/"},{"name":"vim","slug":"vim","permalink":"http://yuncrush.com/tags/vim/"},{"name":"linux","slug":"linux","permalink":"http://yuncrush.com/tags/linux/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yuncrush.com/tags/mongodb/"},{"name":"docker","slug":"docker","permalink":"http://yuncrush.com/tags/docker/"},{"name":"firewall","slug":"firewall","permalink":"http://yuncrush.com/tags/firewall/"}]}