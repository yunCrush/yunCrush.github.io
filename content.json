{"meta":{"title":"Crush","subtitle":"","description":"非著名程序员","author":"Crush","url":"http://yuncrush.com","root":"/"},"pages":[{"title":"categories","date":"2020-07-14T14:46:50.000Z","updated":"2020-07-14T14:48:50.249Z","comments":true,"path":"categories/index.html","permalink":"http://yuncrush.com/categories/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-07-14T14:46:50.000Z","updated":"2020-07-14T14:50:46.066Z","comments":true,"path":"tags/index.html","permalink":"http://yuncrush.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"reflect/reflect-1","slug":"reflect/reflect-1","date":"2021-01-02T13:19:03.568Z","updated":"2021-01-02T13:19:03.568Z","comments":true,"path":"2021/01/02/reflect/reflect-1/","link":"","permalink":"http://yuncrush.com/2021/01/02/reflect/reflect-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ElasticSearch入门（1）","slug":"Es/ElasticSearch_1","date":"2020-09-14T10:32:34.810Z","updated":"2021-01-02T13:22:07.704Z","comments":true,"path":"2020/09/14/Es/ElasticSearch_1/","link":"","permalink":"http://yuncrush.com/2020/09/14/Es/ElasticSearch_1/","excerpt":"","text":"配置说明这里选择rpm包安装es, rpm -ivh elasticsearch.rpm 文件存在于/usr/share/ 配置文件存在/etc/elasticsearch/elasticsearch.yml 端口9200 通过systemctl start elasticsearch启动，status,stop 查看状态与停止 elasticsearch.yml es的相关配置，此处需要将network.host设置为0.0.0.0 jvm.options jvm的相关参数 log4j2.properties 日志相关的配置 cluster.name 集群名称，判断是否是同一集群 node.name 节点名称，以此作为集群中不同节点的区分条件 network.host/http.port 网络地址与端口，用于http和transport服务与使用 path.data 数据的存储地址 path.log 日志的地址Development与Production模式说明 以transport的地址是否绑定在localhost为判断标准network.host Development模式下启动以warning的方式提示配置检查异常 Production模式下在启动时会以error的方式提示配置检查异常 修改参数的第二种方式 bin/elasticsearch-Ehttp.port=19200基本使用 ES本地启动集群方式 12345678910bin&#x2F;elasticsearchbin&#x2F;elasticsearch -Ehttp.port&#x3D;8200 -Epath.data&#x3D;node2bin&#x2F;elasticsearch -Ehttp.port&#x3D;9200 -Epath.data&#x3D;node3ip:port&#x2F;_cluster&#x2F;stats 更多集群相关信息ip:port&#x2F;_cat&#x2F;nodes 节点相关信息，是否组成集群，*表示主节点 index index由具有相同字段的列表组成，相当于mysql的table,6.0后type _doc不再起作用 document 文档，每个文档具有唯一的id标识，自行指定或者es生成倒排索引目录页对应正排索引，索引页对应倒排索引 正排索引：文档ID到文档内容，单词的关联关系 倒排索引：单词到文档ID的关联关系 倒排索引是搜索引擎的核心，主要包含：单词词典与倒排列表 es存储的每个字段都有自己的倒排索引 索引API12345678PUT &#x2F;test_index 创建索引GET _cat&#x2F;indices 查看现有的索引DELETE &#x2F;test_index 删除索引GET &#x2F;test_index 查看当前索引信息 文档的创建 单条文档插入 123456PUT &#x2F;test_index&#x2F;_doc&#x2F;1 单条数据的插入格式：&#x2F;index&#x2F;type&#x2F;idPUT &#x2F;test_index&#x2F;_doc&#x2F;1&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;&#125; 批量文档的插入 12345678910POST test_index&#x2F;_bulk&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;username&quot;:&quot;yun&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;,&quot;age&quot;:18&#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;Python Engineer&quot;,&quot;age&quot;:20&#125; 文档的查询12345678910GET &#x2F;test_index&#x2F;_doc&#x2F;1 查询单条id&#x3D;1,存储在source里面的完整文档信息GET &#x2F;test_index&#x2F;_doc&#x2F;_search query查询，term单词匹配username&#x3D;crush&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125;GET &#x2F;test_index&#x2F;_mget 查询id是1,2的文档&#123;&quot;docs&quot;:[&#123;&quot;_id&quot;:&quot;1&quot;,&quot;_id&quot;:&quot;2&quot;&#125;]&#125; Search API对es里面存储的数据进行查询分析，endpoint为_search 12345678GET &#x2F;_searchGET &#x2F;test_index&#x2F;_searchGET &#x2F;test1_index,test2_index&#x2F;_searchGET &#x2F;test*&#x2F;_search 每次可以查询多个索引 URL Search与Request Body Search1234# url searchGET &#x2F;my_index&#x2F;_search?q&#x3D;crush&amp;df&#x3D;user&amp;sort&#x3D;age:asc&amp;from&#x3D;4&amp;size&#x3D;10&amp;timeout&#x3D;15 q指定查询的语句,df或者default，不指定默认查询，es会查询所有字段,from size用于分页，返回5-14个文档 12345678910# request body searchGET &#x2F;my_index&#x2F;_doc&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;user&quot;:&quot;crush&quot;&#125;&#125;&#125; QueryDSL查询字段类查询: 全文匹配、match、match_phrase等query,单词匹配：term、terms、range等query match Query 1234GET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125; 123456# operator andGET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&#123;&quot;query&quot;:&quot;yun crush&quot;,&quot;operator&quot;:&quot;and&#125;&#125;&#125;&#125; 123456#最小匹配字段数GET test_index&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;job&quot;:&#123;&quot;query&quot;:&quot;java python Engineer&quot;,&quot;minium_should_match&quot;:&quot;2&quot;&#125;&#125;&#125;&#125;","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"}]},{"title":"夏天","slug":"summer","date":"2020-07-05T10:57:44.155Z","updated":"2020-09-10T12:49:16.729Z","comments":true,"path":"2020/07/05/summer/","link":"","permalink":"http://yuncrush.com/2020/07/05/summer/","excerpt":"","text":"夏天的风很自由。","categories":[{"name":"young","slug":"young","permalink":"http://yuncrush.com/categories/young/"}],"tags":[{"name":"枯木逢春夏秋冬","slug":"枯木逢春夏秋冬","permalink":"http://yuncrush.com/tags/%E6%9E%AF%E6%9C%A8%E9%80%A2%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/"}]}],"categories":[{"name":"young","slug":"young","permalink":"http://yuncrush.com/categories/young/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yuncrush.com/tags/ES6/"},{"name":"枯木逢春夏秋冬","slug":"枯木逢春夏秋冬","permalink":"http://yuncrush.com/tags/%E6%9E%AF%E6%9C%A8%E9%80%A2%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/"}]}