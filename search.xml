<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>夏天</title>
    <url>/2020/07/05/summer/</url>
    <content><![CDATA[<p>  夏天的风很自由。</p>
]]></content>
      <categories>
        <category>young</category>
      </categories>
      <tags>
        <tag>枯木逢春夏秋冬</tag>
      </tags>
  </entry>
  <entry>
    <title>Es/ElasticSearch-1</title>
    <url>/2020/09/14/Es/ElasticSearch-1/</url>
    <content><![CDATA[<hr>
<p>title: ElasticSearch入门（1）<br>categories:<br>tags: ES6<br>cover: <a href="https://i.loli.net/2020/09/13/oJ8VNADyQ4msxwW.jpg" target="_blank" rel="noopener">https://i.loli.net/2020/09/13/oJ8VNADyQ4msxwW.jpg</a></p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1436709403&auto=1&height=66"></iframe>

<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><pre><code>这里选择rpm包安装es, rpm -ivh elasticsearch.rpm 文件存在于/usr/share/
配置文件存在/etc/elasticsearch/elasticsearch.yml
端口9200
通过systemctl start elasticsearch启动，status,stop 查看状态与停止
elasticsearch.yml          es的相关配置，此处需要将network.host设置为0.0.0.0
jvm.options                jvm的相关参数
log4j2.properties          日志相关的配置
cluster.name               集群名称，判断是否是同一集群
node.name                  节点名称，以此作为集群中不同节点的区分条件
network.host/http.port     网络地址与端口，用于http和transport服务与使用
path.data                  数据的存储地址
path.log                   日志的地址</code></pre><p><strong>Development与Production模式说明</strong></p>
<pre><code>以transport的地址是否绑定在localhost为判断标准network.host
Development模式下启动以warning的方式提示配置检查异常
Production模式下在启动时会以error的方式提示配置检查异常
修改参数的第二种方式
bin/elasticsearch-Ehttp.port=19200</code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li><p>ES本地启动集群方式</p>
<pre><code>bin/elasticsearch
bin/elasticsearch -Ehttp.port=8200 -Epath.data=node2
bin/elasticsearch -Ehttp.port=9200 -Epath.data=node3
ip:port/_cluster/stats        更多集群相关信息
ip:port/_cat/nodes            节点相关信息，是否组成集群，*表示主节点</code></pre></li>
<li><p>index</p>
<p> index由具有相同字段的列表组成，相当于mysql的table,6.0后type _doc不再起作用</p>
<p> document 文档，每个文档具有唯一的id标识，自行指定或者es生成</p>
</li>
</ol>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>目录页对应正排索引，索引页对应倒排索引</p>
<p>正排索引：文档ID到文档内容，单词的关联关系</p>
<p>倒排索引：单词到文档ID的关联关系</p>
<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/09/14/vUZwgH8DJiM3kcp.png" alt="image.png"></p>
<p>倒排索引是搜索引擎的核心，主要包含：单词词典与倒排列表</p>
<p>es存储的每个字段都有自己的倒排索引</p>
<h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><pre><code>PUT         /test_index                创建索引
GET         _cat/indices               查看现有的索引
DELETE      /test_index                删除索引
GET         /test_index                查看当前索引信息</code></pre><h2 id="文档的创建"><a href="#文档的创建" class="headerlink" title="文档的创建"></a>文档的创建</h2><ol>
<li><p>单条文档插入</p>
<pre><code>PUT /test_index/_doc/1                 单条数据的插入格式：/index/type/id
PUT /test_index/_doc/1
{&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;}</code></pre></li>
<li><p>批量文档的插入</p>
<pre><code>POST test_index/_bulk
{&quot;index&quot;:{&quot;_id&quot;:&quot;1&quot;}}
{&quot;username&quot;:&quot;yun&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;,&quot;age&quot;:18}
{&quot;index&quot;:{&quot;_id&quot;:&quot;2&quot;}}
{&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;Python Engineer&quot;,&quot;age&quot;:20}</code></pre></li>
</ol>
<h2 id="文档的查询"><a href="#文档的查询" class="headerlink" title="文档的查询"></a>文档的查询</h2><pre><code>GET    /test_index/_doc/1                查询单条id=1,存储在source里面的完整文档信息
GET    /test_index/_doc/_search          query查询，term单词匹配username=crush
{&quot;query&quot;:{&quot;term&quot;:{&quot;username&quot;:&quot;crush&quot;}}}
GET /test_index/_mget                    查询id是1,2的文档
{&quot;docs&quot;:[{&quot;_id&quot;:&quot;1&quot;,&quot;_id&quot;:&quot;2&quot;}]}</code></pre><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>对es里面存储的数据进行查询分析，endpoint为_search</p>
<pre><code>GET        /_search
GET        /test_index/_search
GET        /test1_index,test2_index/_search
GET        /test*/_search                    每次可以查询多个索引</code></pre><h3 id="URL-Search与Request-Body-Search"><a href="#URL-Search与Request-Body-Search" class="headerlink" title="URL Search与Request Body Search"></a>URL Search与Request Body Search</h3><pre><code># url search
GET /my_index/_search?q=crush&amp;df=user&amp;sort=age:asc&amp;from=4&amp;size=10&amp;timeout=15</code></pre><p> q指定查询的语句,df或者default，不指定默认查询，es会查询所有字段,from size用于分页，返回5-14个文档</p>
<pre><code># request body search
GET    /my_index/_doc/_search
{
&quot;query&quot;:{&quot;term&quot;:{&quot;user&quot;:&quot;crush&quot;}}
}</code></pre><h3 id="QueryDSL查询"><a href="#QueryDSL查询" class="headerlink" title="QueryDSL查询"></a>QueryDSL查询</h3><p>字段类查询: 全文匹配、match、match_phrase等query,单词匹配：term、terms、range等query</p>
<p><strong>match Query</strong></p>
<pre><code>GET    test_index/_search
{&quot;query&quot;:{&quot;match&quot;:{&quot;username&quot;:&quot;crush&quot;}}}</code></pre><pre><code># operator and
GET test_index/_search
{&quot;query&quot;:{&quot;match&quot;:{&quot;username&quot;:{&quot;query&quot;:&quot;yun crush&quot;,&quot;operator&quot;:&quot;and}}}}</code></pre><pre><code>#最小匹配字段数
GET        test_index/_search
{&quot;query&quot;:{&quot;match&quot;:{&quot;job&quot;:{&quot;query&quot;:&quot;java python Engineer&quot;,&quot;minium_should_match&quot;:&quot;2&quot;}}}}</code></pre>]]></content>
  </entry>
</search>
