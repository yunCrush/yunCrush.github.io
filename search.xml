<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>夏天</title>
    <url>/2020/07/05/summer/</url>
    <content><![CDATA[<p>  夏天的风很自由。</p>
]]></content>
      <categories>
        <category>young</category>
      </categories>
      <tags>
        <tag>枯木逢春夏秋冬</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka/kafka</title>
    <url>/2021/01/02/kafka/kafka/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>redis/redis_1</title>
    <url>/2021/01/02/redis/redis_1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>rabbitmq/rabbitmq_1</title>
    <url>/2021/01/02/rabbitmq/rabbitmq_1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>reflect/reflect_1</title>
    <url>/2021/01/02/reflect/reflect_1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JVM/jvm_1</title>
    <url>/2021/01/02/JVM/jvm_1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>防火墙常用命令</title>
    <url>/2020/07/13/linux/firewall_1/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=416892296&auto=1&height=66"></iframe>

<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p><strong>系统centos7</strong></p>
<p>Centos7默认的防火墙不是iptables而是firewall</p>
<p>查看防火墙状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>
<p>开启/关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p>禁止开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<p>查看开放的端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>
<p>监听端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -lnp | grep 8080</span><br></pre></td></tr></table></figure>
<p>开放/关闭端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;80&#x2F;tcp --permanent      &#x2F;&#x2F;开放端口--permanent重启不会丢失</span><br><span class="line">firewall-cmd --remove-port&#x3D;9999&#x2F;tcp --permanent &#x2F;&#x2F;关闭端口</span><br></pre></td></tr></table></figure>
<p>重启防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload      &#x2F;&#x2F;开放，关闭端口都需要重启防火墙</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch入门</title>
    <url>/2021/01/02/Es/es_1/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1436709403&auto=1&height=66"></iframe>



<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><pre><code>这里选择rpm包安装es, rpm -ivh elasticsearch.rpm 文件存在于/usr/share/

配置文件存在/etc/elasticsearch/elasticsearch.yml

端口9200

通过systemctl start elasticsearch启动，status,stop 查看状态与停止

elasticsearch.yml          es的相关配置，此处需要将network.host设置为0.0.0.0

jvm.options                jvm的相关参数

log4j2.properties          日志相关的配置

cluster.name               集群名称，判断是否是同一集群

node.name                  节点名称，以此作为集群中不同节点的区分条件

network.host/http.port     网络地址与端口，用于http和transport服务与使用

path.data                  数据的存储地址

path.log                   日志的地址</code></pre><p><strong>Development与Production模式说明</strong></p>
<pre><code>以transport的地址是否绑定在localhost为判断标准network.host

Development模式下启动以warning的方式提示配置检查异常

Production模式下在启动时会以error的方式提示配置检查异常

修改参数的第二种方式

bin/elasticsearch-Ehttp.port=19200</code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>ES本地启动集群方式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bin&#x2F;elasticsearch</span><br><span class="line"></span><br><span class="line">bin&#x2F;elasticsearch -Ehttp.port&#x3D;8200 -Epath.data&#x3D;node2</span><br><span class="line"></span><br><span class="line">bin&#x2F;elasticsearch -Ehttp.port&#x3D;9200 -Epath.data&#x3D;node3</span><br><span class="line"></span><br><span class="line">ip:port&#x2F;_cluster&#x2F;stats		更多集群相关信息</span><br><span class="line"></span><br><span class="line">ip:port&#x2F;_cat&#x2F;nodes			节点相关信息，是否组成集群，*表示主节点</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>index</li>
</ol>
<pre><code>index由具有相同字段的列表组成，相当于mysql的table,6.0后type _doc不再起作用



document 文档，每个文档具有唯一的id标识，自行指定或者es生成</code></pre><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>目录页对应正排索引，索引页对应倒排索引</p>
<p>正排索引：文档ID到文档内容，单词的关联关系</p>
<p>倒排索引：单词到文档ID的关联关系</p>
<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/09/14/vUZwgH8DJiM3kcp.png" alt="image.png"></p>
<p>倒排索引是搜索引擎的核心，主要包含：单词词典与倒排列表</p>
<p>es存储的每个字段都有自己的倒排索引</p>
<h2 id="索引API"><a href="#索引API" class="headerlink" title="索引API"></a>索引API</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PUT 		&#x2F;test_index				创建索引</span><br><span class="line"></span><br><span class="line">GET 		_cat&#x2F;indices			   查看现有的索引</span><br><span class="line"></span><br><span class="line">DELETE  	&#x2F;test_index				删除索引</span><br><span class="line"></span><br><span class="line">GET 		&#x2F;test_index				查看当前索引信息</span><br></pre></td></tr></table></figure>

<h2 id="文档的创建"><a href="#文档的创建" class="headerlink" title="文档的创建"></a>文档的创建</h2><ol>
<li>单条文档插入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PUT &#x2F;test_index&#x2F;_doc&#x2F;1				 单条数据的插入格式：&#x2F;index&#x2F;type&#x2F;id</span><br><span class="line"></span><br><span class="line">PUT &#x2F;test_index&#x2F;_doc&#x2F;1</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>批量文档的插入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">POST test_index&#x2F;_bulk</span><br><span class="line"></span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;yun&quot;,&quot;job&quot;:&quot;JAVA Engineer&quot;,&quot;age&quot;:18&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;crush&quot;,&quot;job&quot;:&quot;Python Engineer&quot;,&quot;age&quot;:20&#125;</span><br></pre></td></tr></table></figure>



<h2 id="文档的查询"><a href="#文档的查询" class="headerlink" title="文档的查询"></a>文档的查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET	&#x2F;test_index&#x2F;_doc&#x2F;1				查询单条id&#x3D;1,存储在source里面的完整文档信息</span><br><span class="line"></span><br><span class="line">GET	&#x2F;test_index&#x2F;_doc&#x2F;_search		  query查询，term单词匹配username&#x3D;crush</span><br><span class="line"></span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;test_index&#x2F;_mget					查询id是1,2的文档</span><br><span class="line"></span><br><span class="line">&#123;&quot;docs&quot;:[&#123;&quot;_id&quot;:&quot;1&quot;,&quot;_id&quot;:&quot;2&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>对es里面存储的数据进行查询分析，endpoint为_search</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET		&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET		&#x2F;test_index&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET		&#x2F;test1_index,test2_index&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET 	   &#x2F;test*&#x2F;_search					每次可以查询多个索引</span><br></pre></td></tr></table></figure>

<h3 id="URL-Search与Request-Body-Search"><a href="#URL-Search与Request-Body-Search" class="headerlink" title="URL Search与Request Body Search"></a>URL Search与Request Body Search</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># url search</span><br><span class="line"></span><br><span class="line">GET &#x2F;my_index&#x2F;_search?q&#x3D;crush&amp;df&#x3D;user&amp;sort&#x3D;age:asc&amp;from&#x3D;4&amp;size&#x3D;10&amp;timeout&#x3D;15</span><br></pre></td></tr></table></figure>

<p> q指定查询的语句,df或者default，不指定默认查询，es会查询所有字段,from size用于分页，返回5-14个文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># request body search</span><br><span class="line"></span><br><span class="line">GET	&#x2F;my_index&#x2F;_doc&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;user&quot;:&quot;crush&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="QueryDSL查询"><a href="#QueryDSL查询" class="headerlink" title="QueryDSL查询"></a>QueryDSL查询</h3><p>字段类查询: 全文匹配、match、match_phrase等query,单词匹配：term、terms、range等query</p>
<p><strong>match Query</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET	test_index&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&quot;crush&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># operator and</span><br><span class="line"></span><br><span class="line">GET test_index&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;username&quot;:&#123;&quot;query&quot;:&quot;yun crush&quot;,&quot;operator&quot;:&quot;and&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#最小匹配字段数</span><br><span class="line"></span><br><span class="line">GET		test_index&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;job&quot;:&#123;&quot;query&quot;:&quot;java python Engineer&quot;,&quot;minium_should_match&quot;:&quot;2&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2020/07/13/shell/Shell_1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb/mongodb_1</title>
    <url>/2020/09/13/mongodb/mongodb_1/</url>
    <content><![CDATA[<hr>
<p>title: docker与Mongodb的安装<br>categories:<br>           - Nosql<br>tags:<br>    - mongodb<br>    - docker<br>cover: <a href="https://i.loli.net/2020/09/13/ezUbTCFQPLXk9vr.jpg" target="_blank" rel="noopener">https://i.loli.net/2020/09/13/ezUbTCFQPLXk9vr.jpg</a></p>
<hr>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1449116345&auto=1&height=66"></iframe>

<h2 id="Docker与Mongodb"><a href="#Docker与Mongodb" class="headerlink" title="Docker与Mongodb"></a>Docker与Mongodb</h2><ol>
<li>安装、启动docker<pre><code class="shell">   sudo yum -y update
sudo yum -y install epel-release
sudo yum -y install docker-io
systemclt start docker                           //启动docker
docker  version                            //查看docker版本</code></pre>
</li>
<li>docker的常用命令<pre><code class="shell">docker ps                     //查看docker容器id
docker images                //查看本地镜像
docker ps -a                //显示所有容器,-aq只显示id</code></pre>
</li>
<li>docker安装Mongodb 4.0<pre><code class="shell">   docker pull mongo:4           //拉取mongodb4.0镜像
docker images                    //查看是否有Mongodb镜像
//启动mongodb 端口号27017  进程name mongo
docker run -itd --name mongo -p 27017:27017 mongo:4      //mongodb 4.0版本
docker run -itd --name mongo -p 27017:27017 mongo:latest //最新版本
//验证是否启动成功
docker exec -it mongo mongo</code></pre>
</li>
<li>docker移除镜像与容器<pre><code>docker images
docker rmi &lt;image id&gt;               //强制删除指定id的image
docker rmi $(docker iamges -q)                  //删除所有images
docker stop container-id                   //停止该id的容器
docker rm container-id                       //移除该id的容器
docker stop $(docker ps -aq)                   //停止所有的容器</code></pre></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/07/13/thread/multithread_1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>thread</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>vim基本使用</title>
    <url>/2020/09/13/linux/vim_1/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1424018194&auto=1&height=66"></iframe>

<h2 id="三种模式转换"><a href="#三种模式转换" class="headerlink" title="三种模式转换"></a>三种模式转换</h2><p>命令模式：移动光标、删除  输入: / ?进入命令行模式 输入aiorAIOR进入插入模式</p>
<p>插入模式：输入文本 按ESC进入命令模式</p>
<p>命令行模式：搜索保存退出  按Esc进入模式</p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ol>
<li><p>移动光标<br>h,j,k,l分别代表左下上右，可以加入数字控制位置,10j,向下移动10行<br>0:移动到当前行首  $:移动前行尾<br>G:移动到文件的最后一行,nG:移动到n行，gg移动到第一行<br>n<Enter> 向下移动n行</p>
</li>
<li><p>编辑<br>x:向后删除一个字符    X:向前删除一个字符<br>nx:向后删除n个字符<br>dd:删除一行            ndd:向下删除n行<br>u:撤销前一个操作</p>
</li>
<li><p>查找与替换<br> /word: 向后查找word单词，可以是正则表达式</p>
<p> ?word:向前查找word</p>
<p> :%s/word1/word2[gc]:将word1替换成word2，g全局，gc替换时确认,%整个文本替换</p>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p> i,I:进入插入模式，前者在当前位置插入，后者为当前行第一个非空白字符</p>
<p> o,O:前者在当前行的后面插入新行，后者在当前行的前面插入新行</p>
<p> r,R:前者替换光标所在的字符，后者从当前位置开始替换，直到按下Esc为止</p>
<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p> :进入命令行模式<br> :q :没有修改文件时推出</p>
<p> :q!:修改了文件，但不保存文件退出</p>
<p> :w:保存文件</p>
<p> :w [文件名]: 另存为一个新文件，当前文件没有保存</p>
<p> :w!:强制保存</p>
<p> :x:保存并退出</p>
<p> :x!:强制保存退出</p>
<p> :ZZ:有修改保存退出，没有修改直接退出</p>
<p> :set nu:显示行号</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用指令</title>
    <url>/2020/09/12/linux/linux_1/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1382985712&auto=1&height=66"></iframe>

<h2 id="linux常识性指令"><a href="#linux常识性指令" class="headerlink" title="linux常识性指令"></a>linux常识性指令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname --help					//显示帮助</span><br><span class="line">uname -v					//输出内核版本信息</span><br><span class="line">uname --version					//显示版本信息并退出</span><br><span class="line">who am i					//等于who -m 登陆用户的信息</span><br><span class="line">who						//查询当前登录在系统上的用户信息</span><br><span class="line"><span class="meta">#</span><span class="bash">						//root登陆具有所有权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash">						//普通用户没什么权限</span></span><br></pre></td></tr></table></figure>
<h2 id="文件的传输"><a href="#文件的传输" class="headerlink" title="文件的传输"></a>文件的传输</h2><p><strong>windows本地安装git bash使用</strong></p>
<p><em>1.从远处(服务器)复制文件到本地目录</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp root@192.168.45.129:/usr/<span class="built_in">local</span>/tmp/test.md ./</span></span><br></pre></td></tr></table></figure>
<p><em>2.从远处(服务器)复制目录到本地目录</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp root@192.168.45.129:/usr/<span class="built_in">local</span>/tmp ./</span></span><br></pre></td></tr></table></figure>
<p><em>3.上传本地文件到服务器指定目录</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp /opt/test.tar root@192.168.45.129:/usr/<span class="built_in">local</span></span></span><br></pre></td></tr></table></figure>
<p><em>4.上传本地目录到服务器指定目录</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp /opt/soft/text root@192.168.45.12:/usr/<span class="built_in">local</span></span></span><br></pre></td></tr></table></figure>
<p><em>5.windows文件传输到服务器</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install lrzsz</span><br><span class="line">直接将文件拖入到命令行窗口即可</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
